{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { GameStatus } from \"util/Enums.ts\";\n\n// export const incrementAsync = createAsyncThunk(\n//   \"counter/fetchCount\",\n//   async (amount) => {\n//     const response = await fetchCount(amount);\n//     // The value we return becomes the `fulfilled` action payload\n//     return response.data;\n//   }\n// );\n\nconst initialState = {\n  status: GameStatus.GAME_NOT_LOADED,\n  level: 0\n};\nexport const gameStatusSlice = createSlice({\n  name: \"gameStatus\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    loaded: state => {\n      state.status = GameStatus.GAME_READY;\n    },\n    start: state => {\n      state.status = GameStatus.GAME_START;\n    },\n    pause: state => {\n      state.status = GameStatus.GAME_PAUSE;\n    },\n    end: state => {\n      state.status = GameStatus.GAME_END;\n    },\n    goNextLevel: state => {\n      state.level += 1;\n    },\n    clearLevel: state => {\n      state.status = GameStatus.GAME_NOT_LOADED;\n      state.level = 0;\n    }\n  }\n  // extraReducers: (builder) => {\n  //   builder\n  //     .addCase(incrementAsync.pending, (state) => {\n  //       state.status = \"loading\";\n  //     })\n  //     .addCase(incrementAsync.fulfilled, (state, action) => {\n  //       state.status = \"idle\";\n  //       state.value += action.payload;\n  //     });\n  // },\n});\n\nexport const gameStatusActions = gameStatusSlice.actions;\n\n// export const selectCount = (state) => state.counter.value;\n\n// export const incrementIfOdd = (amount) => (dispatch, getState) => {\n//   const currentValue = selectCount(getState());\n//   if (currentValue % 2 === 1) {\n//     dispatch(incrementByAmount(amount));\n//   }\n// };\n\nexport default gameStatusSlice.reducer;","map":{"version":3,"names":["createSlice","GameStatus","initialState","status","GAME_NOT_LOADED","level","gameStatusSlice","name","reducers","loaded","state","GAME_READY","start","GAME_START","pause","GAME_PAUSE","end","GAME_END","goNextLevel","clearLevel","gameStatusActions","actions","reducer"],"sources":["C:/Users/SSAFY/Documents/S08P31B206/front/src/store/features/gameStatus/gameStatusSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { GameStatus } from \"util/Enums.ts\";\r\n\r\n// export const incrementAsync = createAsyncThunk(\r\n//   \"counter/fetchCount\",\r\n//   async (amount) => {\r\n//     const response = await fetchCount(amount);\r\n//     // The value we return becomes the `fulfilled` action payload\r\n//     return response.data;\r\n//   }\r\n// );\r\n\r\nconst initialState = {\r\n  status: GameStatus.GAME_NOT_LOADED,\r\n  level: 0,\r\n};\r\n\r\nexport const gameStatusSlice = createSlice({\r\n  name: \"gameStatus\",\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    loaded: (state) => {\r\n      state.status = GameStatus.GAME_READY;\r\n    },\r\n    start: (state) => {\r\n      state.status = GameStatus.GAME_START;\r\n    },\r\n    pause: (state) => {\r\n      state.status = GameStatus.GAME_PAUSE;\r\n    },\r\n    end: (state) => {\r\n      state.status = GameStatus.GAME_END;\r\n    },\r\n    goNextLevel: (state) => {\r\n      state.level += 1;\r\n    },\r\n    clearLevel: (state) => {\r\n      state.status = GameStatus.GAME_NOT_LOADED;\r\n      state.level = 0;\r\n    },\r\n  },\r\n  // extraReducers: (builder) => {\r\n  //   builder\r\n  //     .addCase(incrementAsync.pending, (state) => {\r\n  //       state.status = \"loading\";\r\n  //     })\r\n  //     .addCase(incrementAsync.fulfilled, (state, action) => {\r\n  //       state.status = \"idle\";\r\n  //       state.value += action.payload;\r\n  //     });\r\n  // },\r\n});\r\n\r\nexport const gameStatusActions = gameStatusSlice.actions;\r\n\r\n// export const selectCount = (state) => state.counter.value;\r\n\r\n// export const incrementIfOdd = (amount) => (dispatch, getState) => {\r\n//   const currentValue = selectCount(getState());\r\n//   if (currentValue % 2 === 1) {\r\n//     dispatch(incrementByAmount(amount));\r\n//   }\r\n// };\r\n\r\nexport default gameStatusSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,UAAU,QAAQ,eAAe;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAG;EACnBC,MAAM,EAAEF,UAAU,CAACG,eAAe;EAClCC,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMC,eAAe,GAAGN,WAAW,CAAC;EACzCO,IAAI,EAAE,YAAY;EAClBL,YAAY;EACZ;EACAM,QAAQ,EAAE;IACRC,MAAM,EAAGC,KAAK,IAAK;MACjBA,KAAK,CAACP,MAAM,GAAGF,UAAU,CAACU,UAAU;IACtC,CAAC;IACDC,KAAK,EAAGF,KAAK,IAAK;MAChBA,KAAK,CAACP,MAAM,GAAGF,UAAU,CAACY,UAAU;IACtC,CAAC;IACDC,KAAK,EAAGJ,KAAK,IAAK;MAChBA,KAAK,CAACP,MAAM,GAAGF,UAAU,CAACc,UAAU;IACtC,CAAC;IACDC,GAAG,EAAGN,KAAK,IAAK;MACdA,KAAK,CAACP,MAAM,GAAGF,UAAU,CAACgB,QAAQ;IACpC,CAAC;IACDC,WAAW,EAAGR,KAAK,IAAK;MACtBA,KAAK,CAACL,KAAK,IAAI,CAAC;IAClB,CAAC;IACDc,UAAU,EAAGT,KAAK,IAAK;MACrBA,KAAK,CAACP,MAAM,GAAGF,UAAU,CAACG,eAAe;MACzCM,KAAK,CAACL,KAAK,GAAG,CAAC;IACjB;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC,CAAC;;AAEF,OAAO,MAAMe,iBAAiB,GAAGd,eAAe,CAACe,OAAO;;AAExD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAef,eAAe,CAACgB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}