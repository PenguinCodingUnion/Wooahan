{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SSAFY\\\\Documents\\\\S08P31B206\\\\front\\\\src\\\\components\\\\gameJump\\\\Pengul.jsx\",\n  _s = $RefreshSig$();\nimport React, { forwardRef, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useGLTF } from \"@react-three/drei\";\nimport PengulE from \"assets/models/PENGUL_v2.gltf\";\nimport { useClonedModel } from \"util/hooks/useClonedModel\";\nimport usePengul from \"util/hooks/usePengulJump\";\nimport JumpSound from \"components/gameJump/JumpSound\";\nimport jumpSoundUrl from \"assets/sounds/pengulJump.mp3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PengulModel = /*#__PURE__*/_s( /*#__PURE__*/forwardRef(_c = _s((_ref, ref) => {\n  _s();\n  let {\n    bottom,\n    props\n  } = _ref;\n  const pengulE = useRef();\n  const {\n    nodes,\n    materials,\n    animations\n  } = useClonedModel(PengulE);\n  const jumpSound = useRef();\n  usePengul({\n    pengulE,\n    ref,\n    animations,\n    sounds: {\n      jumpSound\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ...props,\n    ref: ref,\n    position: [0, 0, -50],\n    name: \"PengulE\",\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      name: \"Scene\",\n      position: [0, bottom, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"group\", {\n        name: \"Armature\",\n        rotation: [Math.PI / 2, 0, -Math.PI / 2],\n        scale: 0.02,\n        ref: pengulE,\n        children: [/*#__PURE__*/_jsxDEV(\"primitive\", {\n          object: nodes.Bip001\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n          name: \"cartoon_penguin\",\n          geometry: nodes.cartoon_penguin.geometry,\n          material: materials[\"cartoon_penguin.001\"],\n          skeleton: nodes.cartoon_penguin.skeleton,\n          morphTargetDictionary: nodes.cartoon_penguin.morphTargetDictionary,\n          morphTargetInfluences: nodes.cartoon_penguin.morphTargetInfluences\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(JumpSound, {\n        ref: jumpSound,\n        url: jumpSoundUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}, \"bo9FNaH0P8Q+J+PdSMmUJsXG+oA=\", false, function () {\n  return [useClonedModel, usePengul];\n})), \"bo9FNaH0P8Q+J+PdSMmUJsXG+oA=\", false, function () {\n  return [useClonedModel, usePengul];\n});\n_c2 = PengulModel;\nPengulModel.propTypes = {\n  bottom: PropTypes.number\n};\nuseGLTF.preload(PengulE);\nvar _c, _c2;\n$RefreshReg$(_c, \"PengulModel$forwardRef\");\n$RefreshReg$(_c2, \"PengulModel\");","map":{"version":3,"names":["React","forwardRef","useRef","PropTypes","useGLTF","PengulE","useClonedModel","usePengul","JumpSound","jumpSoundUrl","jsxDEV","_jsxDEV","PengulModel","_s","_c","_ref","ref","bottom","props","pengulE","nodes","materials","animations","jumpSound","sounds","position","name","children","rotation","Math","PI","scale","object","Bip001","fileName","_jsxFileName","lineNumber","columnNumber","geometry","cartoon_penguin","material","skeleton","morphTargetDictionary","morphTargetInfluences","url","_c2","propTypes","number","preload","$RefreshReg$"],"sources":["C:/Users/SSAFY/Documents/S08P31B206/front/src/components/gameJump/Pengul.jsx"],"sourcesContent":["import React, { forwardRef, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useGLTF } from \"@react-three/drei\";\r\nimport PengulE from \"assets/models/PENGUL_v2.gltf\";\r\n\r\nimport { useClonedModel } from \"util/hooks/useClonedModel\";\r\nimport usePengul from \"util/hooks/usePengulJump\";\r\nimport JumpSound from \"components/gameJump/JumpSound\";\r\n\r\nimport jumpSoundUrl from \"assets/sounds/pengulJump.mp3\";\r\n\r\nexport const PengulModel = forwardRef(({ bottom, props }, ref) => {\r\n  const pengulE = useRef();\r\n  const { nodes, materials, animations } = useClonedModel(PengulE);\r\n\r\n  const jumpSound = useRef();\r\n\r\n  usePengul({ pengulE, ref, animations, sounds: { jumpSound } });\r\n\r\n  return (\r\n    <group {...props} ref={ref} position={[0, 0, -50]} name=\"PengulE\">\r\n      <group name=\"Scene\" position={[0, bottom, 0]}>\r\n        <group\r\n          name=\"Armature\"\r\n          rotation={[Math.PI / 2, 0, -Math.PI / 2]}\r\n          scale={0.02}\r\n          ref={pengulE}\r\n        >\r\n          <primitive object={nodes.Bip001} />\r\n          <skinnedMesh\r\n            name=\"cartoon_penguin\"\r\n            geometry={nodes.cartoon_penguin.geometry}\r\n            material={materials[\"cartoon_penguin.001\"]}\r\n            skeleton={nodes.cartoon_penguin.skeleton}\r\n            morphTargetDictionary={nodes.cartoon_penguin.morphTargetDictionary}\r\n            morphTargetInfluences={nodes.cartoon_penguin.morphTargetInfluences}\r\n          />\r\n        </group>\r\n        <JumpSound ref={jumpSound} url={jumpSoundUrl} />\r\n      </group>\r\n    </group>\r\n  );\r\n});\r\n\r\nPengulModel.propTypes = {\r\n  bottom: PropTypes.number,\r\n};\r\n\r\nuseGLTF.preload(PengulE);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}