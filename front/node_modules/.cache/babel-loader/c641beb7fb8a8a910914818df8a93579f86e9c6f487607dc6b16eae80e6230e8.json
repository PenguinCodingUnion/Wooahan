{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SSAFY\\\\Documents\\\\S08P31B206\\\\front\\\\src\\\\components\\\\gameSleigh\\\\Model.jsx\",\n  _s = $RefreshSig$();\nimport { useAnimations, useGLTF } from \"@react-three/drei\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport PENGUL from \"assets/models/PENGUL_v2.gltf\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { useClonedModel } from \"util/hooks/useClonedModel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Model = props => {\n  _s();\n  const model = props.modelRef;\n  const isMove = props.isMove;\n  const {\n    scene,\n    materials,\n    animations,\n    nodes\n  } = useClonedModel(PENGUL);\n  const _animations = useAnimations(animations, model);\n  useEffect(() => {\n    props.setModelAnimations(_animations);\n  }, []);\n  const ratio = window.innerWidth / window.innerHeight;\n  const modelScale = () => {\n    if (ratio < 0.6) {\n      return ratio * 0.025;\n    }\n    return 0.01 + ratio / 0.6 * 0.005;\n  };\n  useFrame(() => {\n    const currPosition = model.current.position;\n    if (props.quizStatus === \"stop\") {\n      if (currPosition.x < -props.quizScale) {\n        props.setQuizStatus(\"check\");\n        props.setQuizResult(\"left\");\n      }\n      if (currPosition.x > props.quizScale) {\n        props.setQuizStatus(\"check\");\n        props.setQuizResult(\"right\");\n      }\n    }\n\n    // console.log(props.isMove);\n\n    if (+model.current.isMove === -1) {\n      model.current.position.x -= 0.02 * ratio;\n    }\n    if (+model.current.isMove === 1) {\n      model.current.position.x += 0.02 * ratio;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: model,\n    ...props,\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      name: \"Scene\",\n      children: /*#__PURE__*/_jsxDEV(\"group\", {\n        name: \"Armature\",\n        rotation: [0.2, 0, 0],\n        position: [0, -2, 0],\n        scale: modelScale(),\n        children: [/*#__PURE__*/_jsxDEV(\"primitive\", {\n          object: scene\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n          name: \"cartoon_penguin\",\n          geometry: nodes.cartoon_penguin.geometry,\n          material: materials[\"cartoon_penguin.001\"],\n          skeleton: nodes.cartoon_penguin.skeleton,\n          morphTargetDictionary: nodes.cartoon_penguin.morphTargetDictionary,\n          morphTargetInfluences: nodes.cartoon_penguin.morphTargetInfluences\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(Model, \"Lo1LZoupAXx08INXG0a5z+b+pgo=\", false, function () {\n  return [useClonedModel, useAnimations, useFrame];\n});\n_c = Model;\nuseGLTF.preload(PENGUL);\nexport default Model;\nvar _c;\n$RefreshReg$(_c, \"Model\");","map":{"version":3,"names":["useAnimations","useGLTF","React","useEffect","useRef","useState","PENGUL","useFrame","useClonedModel","jsxDEV","_jsxDEV","Model","props","_s","model","modelRef","isMove","scene","materials","animations","nodes","_animations","setModelAnimations","ratio","window","innerWidth","innerHeight","modelScale","currPosition","current","position","quizStatus","x","quizScale","setQuizStatus","setQuizResult","ref","children","name","rotation","scale","object","fileName","_jsxFileName","lineNumber","columnNumber","geometry","cartoon_penguin","material","skeleton","morphTargetDictionary","morphTargetInfluences","_c","preload","$RefreshReg$"],"sources":["C:/Users/SSAFY/Documents/S08P31B206/front/src/components/gameSleigh/Model.jsx"],"sourcesContent":["import { useAnimations, useGLTF } from \"@react-three/drei\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport PENGUL from \"assets/models/PENGUL_v2.gltf\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport { useClonedModel } from \"util/hooks/useClonedModel\";\r\n\r\nexport const Model = (props) => {\r\n  const model = props.modelRef;\r\n\r\n  const isMove = props.isMove;\r\n\r\n  const { scene, materials, animations, nodes } = useClonedModel(PENGUL);\r\n\r\n  const _animations = useAnimations(animations, model);\r\n\r\n  useEffect(() => {\r\n    props.setModelAnimations(_animations);\r\n  }, []);\r\n\r\n  const ratio = window.innerWidth / window.innerHeight;\r\n\r\n  const modelScale = () => {\r\n    if (ratio < 0.6) {\r\n      return ratio * 0.025;\r\n    }\r\n    return 0.01 + (ratio / 0.6) * 0.005;\r\n  };\r\n\r\n  useFrame(() => {\r\n    const currPosition = model.current.position;\r\n    if (props.quizStatus === \"stop\") {\r\n      if (currPosition.x < -props.quizScale) {\r\n        props.setQuizStatus(\"check\");\r\n        props.setQuizResult(\"left\");\r\n      }\r\n      if (currPosition.x > props.quizScale) {\r\n        props.setQuizStatus(\"check\");\r\n        props.setQuizResult(\"right\");\r\n      }\r\n    }\r\n\r\n    // console.log(props.isMove);\r\n\r\n    if (+model.current.isMove === -1) {\r\n      model.current.position.x -= 0.02 * ratio;\r\n    }\r\n    if (+model.current.isMove === 1) {\r\n      model.current.position.x += 0.02 * ratio;\r\n    }\r\n  });\r\n\r\n  return (\r\n    <group ref={model} {...props}>\r\n      <group name=\"Scene\">\r\n        <group\r\n          name=\"Armature\"\r\n          rotation={[0.2, 0, 0]}\r\n          position={[0, -2, 0]}\r\n          scale={modelScale()}\r\n        >\r\n          <primitive object={scene} />\r\n          <skinnedMesh\r\n            name=\"cartoon_penguin\"\r\n            geometry={nodes.cartoon_penguin.geometry}\r\n            material={materials[\"cartoon_penguin.001\"]}\r\n            skeleton={nodes.cartoon_penguin.skeleton}\r\n            morphTargetDictionary={nodes.cartoon_penguin.morphTargetDictionary}\r\n            morphTargetInfluences={nodes.cartoon_penguin.morphTargetInfluences}\r\n          />\r\n        </group>\r\n      </group>\r\n    </group>\r\n  );\r\n};\r\nuseGLTF.preload(PENGUL);\r\n\r\nexport default Model;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}