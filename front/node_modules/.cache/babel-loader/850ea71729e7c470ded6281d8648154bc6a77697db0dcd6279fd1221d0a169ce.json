{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SSAFY\\\\Documents\\\\S08P31B206\\\\front\\\\src\\\\components\\\\gameSleigh\\\\LoadModel.jsx\",\n  _s = $RefreshSig$();\nimport { Gltf, useAnimations, useFBO, useGLTF } from \"@react-three/drei\";\nimport PropTypes from \"prop-types\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport PENGUL from \"assets/models/PENGUL_v2.gltf\";\nimport PENGUL_old from \"assets/models/PENGUL.gltf\";\nimport { useFrame } from \"@react-three/fiber\";\nimport * as THREE from \"three\";\nimport { useClonedModel } from \"util/hooks/useClonedModel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LoadModel = props => {\n  _s();\n  const group = useRef();\n  // const { scene, materials, animations, nodes } = useClonedModel(PENGUL);\n  const {\n    scene,\n    materials,\n    animations,\n    nodes\n  } = useClonedModel(PENGUL_old);\n\n  // const { scene, materials, animations, nodes } = useGLTF(PENGUL); 2가지 방법이 있다....\n\n  const {\n    actions,\n    mixer,\n    names\n  } = useAnimations(animations, group);\n  console.log(mixer);\n  useEffect(() => {\n    actions[names[props.animationIndex]].reset().fadeIn(0.2).play();\n    mixer.timeScale = props.timeScale;\n    return () => {\n      // actions[names[props.animationIndex]].fadeOut(0.5);\n    };\n  }, [props.animationIndex, props.timeScale]);\n  const modelScale = () => {\n    const ratio = window.innerWidth / window.innerHeight;\n    if (ratio < 0.6) {\n      return ratio * 0.025;\n    }\n    return 0.01 + ratio / 0.6 * 0.005;\n  };\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: group,\n    ...props,\n    children: /*#__PURE__*/_jsxDEV(\"group\", {\n      name: \"Scene\",\n      children: /*#__PURE__*/_jsxDEV(\"group\", {\n        name: \"Armature\",\n        rotation: [0.2, Math.PI, 0],\n        scale: modelScale(),\n        children: [/*#__PURE__*/_jsxDEV(\"primitive\", {\n          object: scene\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"skinnedMesh\", {\n          name: \"cartoon_penguin\",\n          geometry: nodes.cartoon_penguin.geometry,\n          material: materials[\"cartoon_penguin.001\"],\n          skeleton: nodes.cartoon_penguin.skeleton,\n          morphTargetDictionary: nodes.cartoon_penguin.morphTargetDictionary,\n          morphTargetInfluences: nodes.cartoon_penguin.morphTargetInfluences\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this)\n  // <Gltf src={PENGUL} ref={group} {...props} />\n  ;\n};\n_s(LoadModel, \"DdJDcd4Jh4PmjOfKT9+CtWkKQ7w=\", false, function () {\n  return [useClonedModel, useAnimations];\n});\n_c = LoadModel;\nuseGLTF.preload(PENGUL);\nLoadModel.propTypes = {\n  //   second: PropTypes.third\n};\nconst mapStateToProps = state => ({});\nconst mapDispatchToProps = {};\nexport default connect(mapStateToProps, mapDispatchToProps)(LoadModel);\nvar _c;\n$RefreshReg$(_c, \"LoadModel\");","map":{"version":3,"names":["Gltf","useAnimations","useFBO","useGLTF","PropTypes","React","useEffect","useRef","useState","connect","PENGUL","PENGUL_old","useFrame","THREE","useClonedModel","jsxDEV","_jsxDEV","LoadModel","props","_s","group","scene","materials","animations","nodes","actions","mixer","names","console","log","animationIndex","reset","fadeIn","play","timeScale","modelScale","ratio","window","innerWidth","innerHeight","ref","children","name","rotation","Math","PI","scale","object","fileName","_jsxFileName","lineNumber","columnNumber","geometry","cartoon_penguin","material","skeleton","morphTargetDictionary","morphTargetInfluences","_c","preload","propTypes","mapStateToProps","state","mapDispatchToProps","$RefreshReg$"],"sources":["C:/Users/SSAFY/Documents/S08P31B206/front/src/components/gameSleigh/LoadModel.jsx"],"sourcesContent":["import { Gltf, useAnimations, useFBO, useGLTF } from \"@react-three/drei\";\r\nimport PropTypes from \"prop-types\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PENGUL from \"assets/models/PENGUL_v2.gltf\";\r\nimport PENGUL_old from \"assets/models/PENGUL.gltf\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport * as THREE from \"three\";\r\nimport { useClonedModel } from \"util/hooks/useClonedModel\";\r\n\r\nexport const LoadModel = (props) => {\r\n  const group = useRef();\r\n  // const { scene, materials, animations, nodes } = useClonedModel(PENGUL);\r\n  const { scene, materials, animations, nodes } = useClonedModel(PENGUL_old);\r\n\r\n  // const { scene, materials, animations, nodes } = useGLTF(PENGUL); 2가지 방법이 있다....\r\n\r\n  const { actions, mixer, names } = useAnimations(animations, group);\r\n\r\n  console.log(mixer);\r\n\r\n  useEffect(() => {\r\n    actions[names[props.animationIndex]].reset().fadeIn(0.2).play();\r\n\r\n    mixer.timeScale = props.timeScale;\r\n\r\n    return () => {\r\n      // actions[names[props.animationIndex]].fadeOut(0.5);\r\n    };\r\n  }, [props.animationIndex, props.timeScale]);\r\n\r\n  const modelScale = () => {\r\n    const ratio = window.innerWidth / window.innerHeight;\r\n\r\n    if (ratio < 0.6) {\r\n      return ratio * 0.025;\r\n    }\r\n    return 0.01 + (ratio / 0.6) * 0.005;\r\n  };\r\n\r\n  return (\r\n    <group ref={group} {...props}>\r\n      <group name=\"Scene\">\r\n        <group\r\n          name=\"Armature\"\r\n          rotation={[0.2, Math.PI, 0]}\r\n          scale={modelScale()}\r\n        >\r\n          <primitive object={scene} />\r\n          <skinnedMesh\r\n            name=\"cartoon_penguin\"\r\n            geometry={nodes.cartoon_penguin.geometry}\r\n            material={materials[\"cartoon_penguin.001\"]}\r\n            skeleton={nodes.cartoon_penguin.skeleton}\r\n            morphTargetDictionary={nodes.cartoon_penguin.morphTargetDictionary}\r\n            morphTargetInfluences={nodes.cartoon_penguin.morphTargetInfluences}\r\n          />\r\n        </group>\r\n      </group>\r\n    </group>\r\n    // <Gltf src={PENGUL} ref={group} {...props} />\r\n  );\r\n};\r\nuseGLTF.preload(PENGUL);\r\n\r\nLoadModel.propTypes = {\r\n  //   second: PropTypes.third\r\n};\r\n\r\nconst mapStateToProps = (state) => ({});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoadModel);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}